name: Build Custom OMV Kernel with IT87-8613E

on:
  workflow_dispatch: # 允许手动触发工作流
  schedule:
    # 每周日 UTC 时间 00:00 检查是否有新内核版本发布
    - cron: '0 0 * * SUN' 

jobs:
  build:
    runs-on: ubuntu-latest # GitHub Actions 提供基于 Ubuntu 的运行环境

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # 检出你的 GitHub 仓库代码

      - name: Install build dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential flex bison libssl-dev libelf-dev \
            pahole dwarves make gcc git bc cpio rsync libncurses-dev curl jq fakeroot # 安装编译所需的依赖工具

      - name: Get latest stable Linux kernel version
        id: get_kernel_version
        run: |
          # 从 kernel.org 获取最新稳定版内核版本
          LATEST_KERNEL_URL="https://www.kernel.org/releases.json"
          LATEST_STABLE_VERSION=$(curl -s "$LATEST_KERNEL_URL" | jq -r '.releases[] | select(.moniker == "stable") | .version' | head -n 1)
          echo "LATEST_STABLE_VERSION=$LATEST_STABLE_VERSION" >> "$GITHUB_ENV"
          echo "当前最新稳定版内核是: $LATEST_STABLE_VERSION"

      - name: Download Linux kernel source
        run: |
          # 根据获取到的最新版本下载内核源码
          KERNEL_MAJOR_MINOR=$(echo "${{ env.LATEST_STABLE_VERSION }}" | cut -d'.' -f1,2)
          wget https://cdn.kernel.org/pub/linux/kernel/v"${KERNEL_MAJOR_MINOR}".x/linux-"${{ env.LATEST_STABLE_VERSION }}".tar.xz
          tar -xf linux-"${{ env.LATEST_STABLE_VERSION }}".tar.xz
          mv linux-"${{ env.LATEST_STABLE_VERSION }}" linux-kernel-it87

      - name: Clone IT87-8613E driver
        run: |
          # 克隆 it87-8613E 驱动仓库
          git clone https://github.com/andreychernyshev/it87-8613E.git

      - name: Prepare kernel configuration
        run: |
          cd linux-kernel-it87
          # 使用你从 OMV 机器上复制并上传到此仓库的 'config-omv-base' 文件作为基础配置
          # 确保你已将 /boot/config-$(uname -r) 文件上传到此 GitHub 仓库的根目录，并命名为 config-omv-base
          if [ ! -f ../config-omv-base ]; then
            echo "错误: 未找到 'config-omv-base' 文件。请将你 OMV 机器的内核配置文件上传到此仓库的根目录。"
            exit 1
          fi
          cp ../config-omv-base ./.config # 复制 OMV 的基础配置
          make olddefconfig # 根据新内核源码更新配置文件，保持现有配置并为新选项设置默认值

          # 重要: 禁用内核模块签名，除非你设置了模块签名流程。
          # 如果你的 OMV 系统强制模块签名，你需要在这里或 OMV 端进行相应配置。
          sed -i 's/CONFIG_MODULE_SIG_ALL=y/CONFIG_MODULE_SIG_ALL=n/g' ./.config || true
          sed -i 's/CONFIG_MODULE_SIG=y/CONFIG_MODULE_SIG=n/g' ./.config || true
          # 禁用调试信息以减小内核包大小
          sed -i 's/CONFIG_DEBUG_INFO=y/CONFIG_DEBUG_INFO=n/g' ./.config || true

      - name: Compile Linux kernel
        run: |
          cd linux-kernel-it87
          # 编译内核并打包为 Debian DEB 包
          make -j$(nproc) bindeb-pkg

      - name: Compile IT87-8613E module
        run: |
          cd it87-8613E
          # 编译 IT87-8613E 模块，指定使用已编译的内核源码目录
          make KERNELDIR=../linux-kernel-it87
          # 为上传 Artifacts 准备目录
          mkdir -p ../artifacts/it87-module
          # 将编译好的 it87.ko 模块复制到 Artifacts 目录，并加上内核版本
          cp it87.ko ../artifacts/it87-module/it87-${{ env.LATEST_STABLE_VERSION }}.ko

      - name: Move kernel DEB packages to artifacts directory
        run: |
          mkdir -p artifacts/kernel-debs
          mv linux-kernel-it87/*.deb artifacts/kernel-debs/
          # 排除调试包以节省空间，如果你不需要它们
          rm artifacts/kernel-debs/*dbg*.deb || true

      - name: Upload kernel DEB packages
        uses: actions/upload-artifact@v4
        with:
          name: linux-kernel-debs-${{ env.LATEST_STABLE_VERSION }} # Artifact 名称包含内核版本
          path: artifacts/kernel-debs/

      - name: Upload IT87-8613E module
        uses: actions/upload-artifact@v4
        with:
          name: it87-module-${{ env.LATEST_STABLE_VERSION }} # Artifact 名称包含内核版本
          path: artifacts/it87-module/